package com.in28minutes.rest.webservices.restwebservices.user;

import java.net.URI;
import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

@RestController
public class UserResource {

	private UserDaoService userDaoService;
	
	public UserResource(UserDaoService userDaoService) {
		this.userDaoService = userDaoService;
	}
	
	///Get All Users
	@GetMapping("/users")
	public List<User> retrieveAllUser() {
		return userDaoService.findAll();
	}
	
	///Get specific Users
	@GetMapping("/users/{userId}")
	public User retrieveUser(@PathVariable Integer userId) {
		User user = userDaoService.findOne(userId);
		
		if(user == null) {
			throw new UserNotFoundException();
		}
		
		return user;
	}
	
	///Create New User
	@PostMapping("/users")
	public ResponseEntity<User> createUser(@RequestBody User user) {
		User savedUser = userDaoService.saveUser(user);
		
		// /users/4 => /users , /{id} => savedUser.getId()
		URI location = ServletUriComponentsBuilder.fromCurrentRequest()  ///returns current request path ("/users")
				.path("/{id}")
				.buildAndExpand(savedUser.getId()) /////Replaces "/{id}" with created user id.
				.toUri(); ///converts to location of the new resource(uri)
		
		///Always return appropriate response status and the location(uri of the resource) based on the action performed.
		return ResponseEntity.created(location).build();
	}
	
}
